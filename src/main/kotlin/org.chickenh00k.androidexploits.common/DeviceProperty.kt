package org.chickenh00k.androidexploits.common

import kotlinx.serialization.Serializable
import org.chickenh00k.androidexploits.common.Tags.INSTALLERS_TAG
import org.chickenh00k.androidexploits.common.Tags.SECURITY_PATCH_TAG
import org.chickenh00k.androidexploits.common.UrlConstants.INSTALLER
import org.chickenh00k.androidexploits.common.UrlConstants.PACKAGE
import org.chickenh00k.androidexploits.common.UrlConstants.WEBVIEW_PACKAGE
import org.chickenh00k.androidexploits.common.UrlConstants.WEBVIEW_UPDATE
import org.chickenh00k.androidexploits.common.UrlConstants.WEBVIEW_VERSION
import org.json.JSONObject
import java.text.SimpleDateFormat


@Serializable
data class DeviceProperty(val key: String, val value: String) {

    companion object {

        fun getSecurityPatchDate(properties: List<DeviceProperty>): kotlinx.datetime.Instant? {
            val securityPatchRaw = properties.find { it.key ==  SECURITY_PATCH_TAG}
            if(securityPatchRaw == null) {
                return null
            }
            val formatter = SimpleDateFormat("yyyy-MM-dd")
            val patchDate = formatter.parse(securityPatchRaw.value)
            return kotlinx.datetime.Instant.fromEpochMilliseconds(patchDate.time)
        }

        fun getInstallers(propperties: List<DeviceProperty>):  HashMap<String, ArrayList<String>>? {
            val installersMap = HashMap<String, ArrayList<String>>()
            val installer = propperties.find { it.key == INSTALLERS_TAG }
            installer?.let {
                val installerJson = JSONObject(it.value)
                val installerArray = installerJson.getJSONArray(INSTALLER)
                val length = installerArray.length()
                for(i in 0 until length) {
                    val jsonObject = installerArray.getJSONObject(i)
                    val installer = jsonObject.getString(INSTALLER)
                    val appPackage = jsonObject.getString(PACKAGE)
                    installersMap.getOrPut(installer) { ArrayList() }.add(appPackage)
                }
                return installersMap
            }

            return null
        }

        fun getWebView(propperties: List<DeviceProperty>): Pair<String, Pair<String, Long>>? {
            var pn = ""
            var version = ""
            var update: Long = 0
            propperties.forEach { property ->
                when (property.key) {
                    WEBVIEW_PACKAGE -> {
                        pn = property.value
                    }

                    WEBVIEW_VERSION -> {
                        version = property.value
                    }

                    WEBVIEW_UPDATE -> {
                        property.value.toLongOrNull()?.let {
                            update = it
                        } ?: kotlin.run {
                            return null
                        }
                    }
                }
            }
            if (pn.isNotEmpty()) {
                return Pair(pn, Pair(version, update))
            } else {
                return null
            }
        }

    }
}